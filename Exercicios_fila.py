# -*- coding: utf-8 -*-
"""Fila.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bPOvIlB7b6IVhPNn6zIFP1GrhBg6kEFN
"""

#8 Exericio

from collections import deque
fila = deque(range(1, 11))

for numero in list(fila):
  if numero % 2 == 0:
    fila.remove(numero)

print("Fila após remover números pares:", list(fila))

#9 Exercicio

def existe_na_fila(fila, elemento):
  return elemento in fila

fila = deque([5, 10, 15, 20])
print("O elemento 10 está na fila?", existe_na_fila(fila, 10))
print("O elemento 7 está na fila?", existe_na_fila(fila, 7))

#10 Exercicio

fila = deque([1, 2, 3, 4, 5])

for _ in range(1):
  elemento = fila.popleft()
  fila.append(elemento)

print("Fila após uma rotação:", list(fila))

#11 Exercicio

def tamanho_fila(fila):
  return len(fila)

fila = deque([1, 2, 3, 4, 5])
print("Tamanho da fila:", tamanho_fila(fila))

#12 Exercicio

fila_tarefas = deque(['Tarefa 1', 'Tarefa 2', 'Tarefa 3', 'Tarefa 4'])

while fila_tarefas:
  tarefa_atual = fila_tarefas.popleft()
  print(f"Executando {tarefa_atual}")

#13 Exericio

def enfileirar_numeros(n):
  fila = deque()
  for i in range(1, n +1):
    fila.append(i)

    while fila:
      print(f"Desenfileirando: {fila.popleft()}")

enfileirar_numeros(5)

#14 Exercicio

fila_jogadores = deque(['Jogador 1', 'Jogador 2', 'Jogador 3'])

for rodada in range(6):
  jogador = fila_jogadores.popleft()
  print(f"Rodada {rodada + 1}: {jogador} joga")
  fila_jogadores.append(jogador)

#15 Exericio

def enfileirar_maiusculas(lista):
  fila= deque()
  for palavra in lista:
    if palavra[0].isupper():
      fila.append(palavra)

  return fila

lista_palavras = ['Python', 'Java', 'C++', 'html', 'Javascript']
fila = enfileirar_maiusculas(lista_palavras)
print("Fila com palavras que começam com maiúsculas:", list(fila))

"""***Atividade 6***"""

#1 Exericio

class Fila:
  def __init__(self):
    self.fila = []

  def enfileirar(self, item):
    self.fila.append(item)

  def desenfileirar(self):
    if not self.fila_vazia():
      return self.fila.pop(0)
    return "Fila Vazia"

  def fila_vazia(self):
    return len(self.fila) == 0

f = Fila()
f.enfileirar(1)
f.enfileirar(2)
f.enfileirar(3)
print(f.desenfileirar())
print(f.desenfileirar())

#2 Exercicio

class FilaLimitada:
  def __init__(self, tamanho_maximo):
    self.fila = []
    self.tamanho_maximo = tamanho_maximo

  def enfileirar(self, item):
    if not self.fila_cheia():
      self.fila.append(item)
    else:
      print("Fila cheia!")

  def desenfileirar(self):
    if not self.fila_vazia():
      return self.fila.pop(0)
    return "Fila vazia"

  def fila_cheia(self):
    return len(self.fila) == self.tamanho_maximo

  def fila_vazia(self):
    return len(self.fila) == 0

f = FilaLimitada(2)
f.enfileirar(1)
f.enfileirar(2)
f.enfileirar(3)

#3 Exericio

class FilaCircular:
  def __init__(self, capacidade):
    self.capacidade = capacidade
    self.fila = [None] * capacidade
    self.inicio = self.fim = -1

  def enfileirar(self, item):
    if (self.fim + 1) % self.capacidade == self.inicio:
      print("Fila cheia")
    elif self.inicio == -1:
      self.inicio = self.fim = 0
      self.fila[self.fim] = item
    else:
      self.fim = (self.fim + 1) % self.capacidade
      self.fila[self.fim] = item

  def desenfileirar(self):
    if self.inicio == -1:
      return "Fila vazia"
    elif self.inicio == self.fim:
      item = self.fila[self.inicio]
      self.inicio = self.fim = -1
    else:
      item = self.fila[self.inicio]
      self.inicio = (self.inicio + 1) % self.capacidade
    return item

f = FilaCircular(3)
f.enfileirar(1)
f.enfileirar(2)
f.enfileirar(3)
print(f.desenfileirar())

#4 Exericio

import heapq

class FilaPrioridade:
  def __init__(self):
    self.fila = []

  def enfileirar(self, item, prioridade):
    heapq.heappush(self.fila, (prioridade, item))

  def desenfileirar(self):
    if not self.fila_vazia():
      return heapq.heappop(self.fila)[1]
    return "Fila Vazia"

  def fila_vazia(self):
    return len(self.fila) == 0

f = FilaPrioridade()
f.enfileirar("Tarefa 1", 2)
f.enfileirar("Tarefa 2", 1)
f.enfileirar("Tarefa 3", 3)
print(f.desenfileirar())

#5 Exercicio

class FilaDeque:
  def __init__(self):
    self.fila = deque()

  def enfileirar(self, item):
    self.fila.append(item)

  def desenfileirar(self):
    if not self.fila_vazia():
      return self.fila.popleft()
    return "Fila vazia"

  def fila_vazia(self):
    return len(self.fila) == 0

f = FilaDeque()
f.enfileirar(1)
f.enfileirar(2)
print(f.desenfileirar())